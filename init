#!/recovery/sbin/busybox sh
#
# PURPOSE 
# ONE KERNEL IMAGE WITH ONE INITRAMFS FLASHABLE WITH HEIMDALL/ODIN 
#
# AUTHORS
# Stratosk: http://forum.xda-developers.com/showthread.php?t=1468795
# Mialwe: http://forum.xda-developers.com/showthread.php?t=1551410
#
# BACKGROUND
# CM9 currently uses an init system with two separate initramfs
# images which are packed into the kernel image at compile time.
# During every boot process the needed initramfs image (recovery
# or Android) gets extracted and the boot process continues using 
# the freshly extracted initramfs. A CWM zip has to be used to 
# install the kernel and it's modules/support files.
#
# With this initscript there will be one initramfs only, without
# the need to pack/extract anything and a reduced risk for 
# boot issues resulting from this processes. Additionally the
# generated kernel image can be flashed directly via Heimdall/Odin.
# 
# ORIGINAL SOURCE 
# CM9: https://github.com/CyanogenMod/android_kernel_samsung_aries
#
# INITRAMFS STRUCTURE:
# /
#  -- /recovery        (complete recovery initramfs)
#  -- /root            (complete Android initramfs)
#  -- /lib/modules     (modules directory)
#  -- init (this script)
# 

export _PATH="$PATH"
export PATH=/

# set busybox location, save busybox as we will move directories
/recovery/sbin/busybox cp /recovery/sbin/recovery /busybox
BB="/busybox"

# initialize working dir and log
$BB cd /
$BB date >>boot.txt
exec >>boot.txt 2>&1

$BB rm init

$BB echo "generating mount directories..."
$BB mkdir proc
$BB mkdir sys
$BB mkdir system

$BB mkdir /dev
$BB mkdir /dev/block

$BB echo "generating device nodes..."
$BB mknod /dev/block/mmcblk0 b 179 0
$BB mknod /dev/block/mmcblk0p1 b 179 1
$BB mknod /dev/block/mmcblk0p2 b 179 2
$BB mknod /dev/block/mmcblk0p3 b 179 3
$BB mknod /dev/block/mmcblk0p4 b 179 4
$BB mknod /dev/block/mmcblk0p5 b 179 5
$BB mknod /dev/block/mmcblk0p6 b 179 6
$BB mknod /dev/block/mmcblk0p7 b 179 7
$BB mknod /dev/block/mmcblk0p8 b 179 8
$BB mknod /dev/block/mmcblk0p9 b 179 9
$BB mknod /dev/block/mmcblk0p10 b 179 10
$BB mknod /dev/block/mmcblk0p11 b 179 11
$BB mknod /dev/block/mmcblk0p12 b 179 12
$BB mknod /dev/block/mmcblk1 b 179 16
$BB mknod /dev/block/mmcblk1p1 b 179 17

$BB echo "mounting devices..."
$BB mount -t proc proc /proc
$BB mount -t sysfs sysfs /sys
$BB echo 1 > /sys/kernel/req_recovery/enable
$BB mv /root/charger /
$BB mv /root/init /

while ! $BB test -d /sys/dev/block/179:0 ; do
    echo "Waiting for internal mmc..."
    $BB sleep 1
done

$BB mount -t ext4 /dev/block/mmcblk0p9 /system

$BB echo "making modules directory"
$BB mkdir /system/lib/modules
$BB chmod 777 /system/lib/modules

$BB echo "removing old modules..."
$BB rm /system/lib/modules/*
$BB echo "updating modules..."
$BB cp /lib/modules/* /system/lib/modules/

$BB echo "making init.d"
$BB mkdir /system/etc/init.d
$BB chmod 777 /system/etc/init.d

$BB echo "command line:"
$BB cat /proc/cmdline

$BB echo "starting bootmode detection..."
if $BB grep -q bootmode=2 /proc/cmdline ; then
    # recovery boot
    $BB echo "found recovery command, preparing boot..."
    $BB echo "moving recovery to /"
    $BB mv /recovery/* /
else
    $BB mv /root/* /
fi

$BB echo "debug output:"
$BB echo "current /:"
$BB ls -l /
$BB echo "current /system:"
$BB ls -l /system/
$BB echo "current /system/lib/modules:"
$BB ls -l /system/lib/modules/

$BB echo "cleaning up..."
$BB echo 0 > /sys/kernel/req_recovery/enable
$BB umount /sys
$BB umount /proc
$BB umount /system

# original initramfs directories not needed anymore,
# busybox not needed anymore...
$BB rm -rf /root
$BB rm -rf /recovery
$BB rm -rf /lib

$BB date >>boot.txt
$BB rm -fr /dev/*

# finally remove busybox
$BB rm /busybox

export PATH="${_PATH}"
exec /init
